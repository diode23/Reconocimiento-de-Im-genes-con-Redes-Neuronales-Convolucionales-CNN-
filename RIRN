# Cargar y dividir el conjunto de datos CIFAR-10 (ejemplo)
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalizar los valores de píxeles en el rango [0, 1]
train_images, test_images = train_images / 255.0, test_images / 255.0

# Definir la arquitectura de la red neuronal convolucional (CNN)
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu')
])

# Agregar capas densas para la clasificación final
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10)  # Capa de salida con 10 clases en CIFAR-10

# Compilar el modelo con función de pérdida y optimizador
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Entrenar el modelo con los datos de entrenamiento
model.fit(train_images, train_labels, epochs=10,
          validation_data=(test_images, test_labels))

# Evaluar el modelo con los datos de prueba
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f'Precisión en datos de prueba: {test_acc}')
